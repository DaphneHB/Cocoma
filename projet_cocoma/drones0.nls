
;-----------
;  DRONES
;-----------


to setup-drones
  create-drones nb-drones
  
  reinitialize-drones ; TODO
end


to reinitialize-drones
  if nb-drones > 0 [
    ; get the size of the base to deploy the car accordingly
    let base-min-pxcor min [pxcor] of (patches with [base? and pzcor = mapAlt])
    let base-max-pxcor max [pxcor] of (patches with [base? and pzcor = mapAlt])
    let base-min-pycor min [pycor] of (patches with [base? and pzcor = mapAlt])
    let base-max-pycor max [pycor] of (patches with [base? and pzcor = mapAlt])

    ask drones
    [
      ; Init apparence NetLogo
      set voiture1 min [who] of convois
      set voiture2 max [who] of convois
      set pv d-life
      set shape "airplane"
      set color yellow
      set decollage? true
      set atterrissage? false
      set maxdir 10 * simu-speed
      ; Init des structures BDI
      ;set incoming-queue [] ; Do not change

      ; Init vars convois
      set speed 0.1 * simu-speed * d-speed
      ;set maxdir 10 * simu-speed * d-speed
      set heading 0
      set roll 0
      set pitch 0
      set finished? false
      set leader? false
      set dead? false
    set freq-tir 0 ; initialisée à 0 pour pouvoir tirer la premiere balle
                   ; Visu
                   ;set label who ; display the car names
    set carburant 1000
    set beliefs []
    set intentions []
    ]
    
    ; get the id of the first one
    let first-drone min [who] of drones
    
    ; configure the leader
    ask drone first-drone [
      set leader? true
      set color orange
      move-to patch base-max-pxcor base-max-pycor 1
    ]

    ; deploying the other car
    if nb-drones > 1 [
      ; ask non leader cars
      ask turtle-set sort-on [who] drones with [who > first-drone]
      [
        ; we create a link between them
        ;create-convoi-link-to turtle (who - 1)
        ;if who >= 4 and who mod 2 = 0 [ create-convoi-link-with turtle (who - 3) ]
        
        ; deploying
        ifelse (who - first-drone - 1) mod 2 = 0 [ set xcor base-min-pxcor ] [ set xcor base-max-pxcor ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
        set ycor (base-max-pycor - (floor ((who - first-drone) / 2) / (nb-drones / 2) * (base-max-pycor - base-min-pycor))) ; d'une rangee de plus en plus basse toutes les deux voitures
        set zcor solAlt
      ] 
    ]
  ]
end



to go-drones1
 ; let lead-conv one-of convois with [leader?]
  ask drones [
    if (pv > 0)[
      if (decollage? = true and atterrissage? = false)
      [decollage]
      if  (decollage? = false and atterrissage? = true)
      [atterrissage]
      if (decollage? = true and atterrissage? = true)
      [transition]
      
      
      if (decollage? = false and atterrissage? = false)[
        
        
        ifelse (carburant > 150 )[
          ifelse (but = 0)[
          
          
          let nearest-ennemy min-one-of ennemies in-radius-nowrap d-vision with [pzcor = mapAlt] [distance-nowrap myself]
          let nearest-convoi min-one-of convois in-radius-nowrap (d-vision / 3 * 2) with [pzcor = mapAlt] [distance-nowrap myself]
          ifelse ((nearest-ennemy != nobody) and  ( nearest-convoi != nobody ))[
            if (nearest-ennemy != nobody)[
              set color blue
              attack-ennemi nearest-ennemy]
          ]
          [follow-convois]
          
          prevenirdronetoconvoi
          
        ][ ifelse (patch-here != but) [ move-drone but false false] [ set but 0] ]
        ]
          
          
        [ return-base]
      ]
    set carburant (carburant - 1)
  ]
    ]
  
end


to decollage

    if ((pitch < 30) and (zcor < 5))[
      set pitch pitch + 10
    ]
    if (zcor >= 5)[
      if (pitch != 0)[
        set pitch pitch - 10
      ]
    ]
    fd speed
  
  if (pitch = 0)[
    set decollage? false
  ]
  ;else set decollage false
end

to atterrissage

    ifelse (  patch-here != patch 3 1 1) 
      [ face patch 3 1 1
        fd speed]
      [ set decollage? true]


end

to transition
  ifelse (patch-here != patch 4 0 1)
 [
   move-drone patch 4 0 1 false false]
  
  
 [ 
  face patch 4 10 1
  set atterrissage? false
  set pitch 0
  set roll 0
  set carburant 1000]
end



to follow-convois

 ;let nearest-convoi min-one-of convois in-radius-nowrap d-vision [distance myself]
  ;let nearest-convoi one-of convois in-radius-nowrap d-vision 
  let v1 voiture1
  let v2 voiture2

  let nearest-convoi one-of convois in-radius-nowrap d-vision with [[who] of self >= v1 and [who] of self <= v2]
  ;let nearest-convoi one-of convois in-radius-nowrap d-vision with [to-protect? = true]
  
  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ; ifelse ( (any? convois in-radius d-vision  )); or (nobody =  convois  in-radius d-dist-tir ) )
  ifelse (nearest-convoi != nobody)[
    ifelse ((distance nearest-convoi <= d-vision) )[ ; and (distance nearest-convoi >= d-dist-tir ))
      set color magenta
      set pitch 0
      set roll 0
      set headingFlag (towards nearest-convoi)
      let dirCorrection subtract-headings headingFlag heading
      ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
      set dirCorrection precision dirCorrection 2
      ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
      ifelse dirCorrection > maxdir[ ; limite a droite
        set dirCorrection maxdir
        ; On tourne
        rt dirCorrection
        if (roll < 20)[
          set roll roll + 15
        ]
      ]
      [
        if dirCorrection < maxdir * -1 [ ; limite a gauche
          set dirCorrection maxdir * -1
          ; On tourne
          rt dirCorrection
          if (roll > -20)[
            set roll roll - 15
          ]
        ]
      ]
      
      if (not detect-obstacle)[
        fd speed
      ]
    ]
    [
      set color red
  ;set to-follow nobody
      random-walk-drone
    ]
  ]
  [
    set color red
  ;set to-follow nobody
    random-walk-drone
  
] 

end

to return-base
  prevoir
  
  
  ifelse (patch-here != patch 3 20 5)
  [
 ; face patch 2 20 5
  set roll 0
 ; set pitch 0
 ; fd speed
  move-drone patch 3 20 5 false false
  
  ]
  [set atterrissage? true
    set roll 0
    face patch-at 0 -1 0
    set pitch 0
    ]
end


to prevoir
  let tmp    (2 * sqrt( ((pxcor - [pxcor] of patch 3 1 1)) ^ 2 + ((pycor - [pycor] of patch 3 1 1 )) ^ 2) )
  let nb ceiling (tmp)
  let previ patch 0 0 0
  ifelse (length [chemin] of turtle voiture1 > nb)
  [set previ item nb [chemin] of turtle voiture1]
  [ set previ last [chemin] of turtle voiture1 ]
  set but previ
end






to attack-ennemi [nearest]
  set heading towards nearest
  ifelse (any? ennemies in-radius-nowrap d-dist-tir) [
    set color yellow
    ifelse (freq-tir = 0) [
      face nearest
      hatch-bullets 1 [
        set num  2
        set speed 0.2 * simu-speed
        set energy (d-dist-tir * 20)
        set color red ; TODO calcul a déterminer
      ]
      set freq-tir d-frequence-tir * d-dist-tir / simu-speed
      set pitch 0
    ]
    [set freq-tir (freq-tir - 1)]
  ]
  [fd speed ]
  ;[if not detect-obstacle [fd speed]] ; ils vont a l'encontre du convoi qu'ils on vu
end



to random-walk-drone
  if (not detect-obstacle)[
    set pitch 0
    set roll 0
    forward speed
  ]
  ifelse (random 3 < 2)[
    rt random 20
    if (roll < 5)[
      set roll roll + 15
    ]
  ]
  [
    lt random 20
    if (roll < 5)[
      set roll roll + 15
    ]
  ]
end


to calcule_astar_drone
  set list_as []
  test_drone
  foreach list_as [  ;parcourir les convois
    let p nobody  ;patch d'arrivee  = goal
    let tmp []
    let fchemin []  ; chemin temporaire
    foreach ? [    ;pour chaque convoi parcourir les voitures    
      ifelse (p = nobody)[   ;si leader
        set tmp (plan-astar (patch (item 1 ?) (item 2 ?) MapAlt) (item 3 ?) false)
        set p (patch (item 1 ?) (item 2 ?) MapAlt)
        set fchemin tmp
      ]
      [
        set tmp (plan-astar (patch (item 1 ?) (item 2 ?) MapAlt) p false)    
        set p (patch (item 1 ?) (item 2 ?) MapAlt)
        set tmp (sentence tmp fchemin)
        set fchemin tmp
      ]
      ask convoi (item 0 ?) [
        set chemin fchemin
        print "JE SUIS"
        print item 0 ?
        print chemin
        print but
        print "!!!!!!!!!!!!!!!!!"
      ]
    ]
  ]
  set calcule? false
end


to test_drone
foreach sort-on [who] convois[
  ask ? [
    set list_as_tmp []
    set chemin []
    if (not dead? and leader?)[
      set list_as_tmp lput (list who pxcor pycor but) list_as_tmp
      test2_drone
    ]
  ]
] 
end 
    
    
to test2_drone
  ifelse (  any? in-link-neighbors) [    
     ask in-link-neighbors [ 
       set list_as_tmp lput (list who pxcor pycor but) list_as_tmp
       test2_drone
     ]
  ]
  [set list_as lput list_as_tmp list_as]       
end   


to move_drone
  ask drones with [ not finished? and not dead?] [ ; Tant qu'on n'a pas atteint le but
                                                    ;move-convoi-naive ; deplacement naif sans AStar
    
                                                    ; Recupere le plan AStar
   
   
    if (not empty? chemin) [
      ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
      let next-patch first chemin
      let zz pzcor
      set next-patch [patch-at 0 0 (zz - pzcor)] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
      if next-patch != patch-here [move-drone next-patch false false]
      ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
      if patch-here = next-patch [
        set chemin remove-item 0 chemin
        if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
      ]
    ]
    check-convoi-finished
  ]
end



to move-drone [goal slowdown? cortege?]
  ;show (word "ici:" patch-here " goal:" goal)

  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir [ ; limite a droite
    set dirCorrection maxdir
  ]
  [
    if dirCorrection < maxdir * -1 [ ; limite a gauche
      set dirCorrection maxdir * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed speed
  if slowdown? [
    if distance-nowrap goal < 1.1 [
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  fd tmp-speed ; Avance
end


to modif-protection [voit1 voit2]
  set voiture1 voit1
  set voiture2 voit2
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;BDI TEST;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to T
  if (ticks = 0)[
  add-intention "follow-convois" "bla"
  add-intention "decollage" "blabla"
  ]
end


to go-drones
  ask drones [
  
  T

  execute-intentions
  
  ]
  
end

to-report blabla
  report not decollage?
end

to-report bla
  report decollage?
end


