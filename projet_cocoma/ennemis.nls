
;-----------
;  ENNEMIES
;-----------


to setup-ennemies
  create-ennemies nb-ennemies
  ; on récupere tous les patch qui ne sont pas des obstacles donc ponts et vert
  let good-patches n-of nb-ennemies patches with [pzcor = solAlt and not obstacle? and not any? other turtles-here] ;(pcolor < (green + 2) or pcolor > (green - 2))
  ask ennemies [
    set pv e-life
    set shape "car"
    ; on leur donne la meme fct de vitesse que le convoi avec des parametres differents
    set speed 0.05 * e-speed * simu-speed
    set carburant 100
    ; on pose l'agent sur un patch non obstacle
    let good-patch one-of good-patches with [pxcor > 25 or pycor > 25]
    move-to good-patch
    set zcor solAlt
    ;setxyz random-xcor random-ycor mapAlt;( min-pycor + 1 ) random-zcor
    set color red
    set freq-tir 0 ; initialisée à 0 pour pouvoir tirer la premiere balle
    set maxdir 10 * simu-speed
    ]
end


;;; Pour gérer le déplacement des ennemies
to go-ennemies
  ask ennemies [
    if (pv > 0)[
    ;;
      let nearest-convoi detect-convoi e-vision
      ;let nearest-convoi min-one-of convois in-radius-nowrap e-vision [distance-nowrap myself]
      let nearest-drone min-one-of drones in-radius-nowrap e-vision with [pzcor > solAlt and pzcor < max-pzcor] [distance-nowrap myself]
      
      ifelse ((nearest-convoi != nobody) or (nearest-drone != nobody))[
        set color blue
        ifelse (nearest-drone != nobody)[
          attack-convoi nearest-drone]
        [attack-convoi nearest-convoi]
      ]
      [
        set color red
        ;set to-follow nobody
        random-walk]
      ;right random 90
      ;;; Si l'agent n'a plus de carburant il marche
      ;ifelse carburant > 0
      ;[ forward ( random speed + 1 )]
      ;[ forward ((random speed + 1 )/ 2) ]
    ]
  ]
end

to attack-convoi [nearest]
  set heading towards nearest
  ifelse (distance-nowrap nearest <= e-dist-tir)[
    set color yellow
    ifelse (freq-tir = 0) [
      face nearest
      hatch-bullets 1 [
        set num 1
        set speed 0.2 * simu-speed
        set energy (e-dist-tir * 20)
        set color red ; TODO calcul a détermine
      ]
      set freq-tir e-frequence-tir * e-dist-tir / simu-speed
      set pitch 0
    ]
    [
      set freq-tir (freq-tir - 1)]
  ]
  
  [
    if not detect-obstacle [fd speed]
  ] ; ils vont a l'encontre du convoi qu'ils on vu
end



;;; Renvoie le plus proche convoi dans un rayon de distance, sur un angle de angle
; on ne considere que avec une rotation totale ou avec une vision a 180
to-report detect-convoi [dist]
  ;; tant qu'on n'a pas inspecté tous les patches dans la distance attendue
  ;;;; on inspecte tous les patches sur une distance pour un angle donné
  let cpt 1
  let angle 360 ; on verifie toujours tout autour
  let cases-visitees []
  ;; on enregistre tous les angles a eliminer parce qu'un obstacle y a été vu plus tot (liste)
  let angles-impossibles []
  ;; on avance en augmentant le rayon de verification
  while [cpt <= dist] [
    ; on teste pour angle/2 à gauche (donc -angle/2) et angle/2 à gauche
    let ss-cpt (0 - (angle / 2))
    ;; on verifie dans l'angle de 5 en 5 (estimation arbitraire)
    while [ss-cpt <= angle / 2] [
      ; si l'angle a été scellé
      if (not member? ss-cpt angles-impossibles)
      [
        let patch-au-loin patch-at-heading-and-distance ss-cpt cpt
        ifelse (member? patch-au-loin cases-visitees)
        [set cases-visitees lput patch-au-loin cases-visitees]
        [
          ;; on verifie les obstacles sur cette case pour choisir de sceller cet angle
          ifelse ([obstacle?] of patch-au-loin = true)
          [
            ;print "angle scellé"
            set angles-impossibles lput ss-cpt angles-impossibles]
          [
            let convois-on-patch convois-on patch-au-loin
            if (any? convois-on-patch) [
              ;;; on verifie si le chemin ne comporte pas d'obstacles
              ;  set heading ss-cpt
              ;  ifelse (not detect-obstacle-path cpt)[
              report one-of convois-on-patch]
            ; [set heading -1 * ss-cpt]]
          ]
        ]
      ]
      set ss-cpt ss-cpt + 7 ; increment de 7 choisi arbitrairement
    ]
    set cpt cpt + 1
  ]
  report nobody
end